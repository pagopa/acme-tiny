pool:
  vmImage: "ubuntu-20.04"

parameters:
  - name: 'FORCE_RENEW_CERT'
    displayName: 'Force the existing certificate to be renewed anyway'
    type: boolean
    default: False
    values:
      - False
      - True

stages:
  - stage: SignCertificate
    jobs:

      - job: RenewalDecision
        steps:

          - task: AzureKeyVault@2
            name: GetCertificateFromKeyVault
            inputs:
              azureSubscription: $(KEY_VAULT_SERVICE_CONNECTION)
              KeyVaultName: $(KEY_VAULT_NAME)
              SecretsFilter: $(KEY_VAULT_CERT_NAME)
              RunAsPreJob: false

          - task: PythonScript@0
            name: CertificateToFile
            condition: succeeded()
            inputs:
              scriptSource: filePath
              scriptPath: env_to_file.py
              arguments: --env-name $(KEY_VAULT_CERT_NAME) --out certificate.pem

          - script: pip3 install --require-hashes --requirement requirements.txt
            name: InstallPythonDependencies
            condition: succeeded()

          - task: PythonScript@0
            name: CheckCertificateExpiration
            condition: succeeded()
            inputs:
              scriptSource: filePath
              scriptPath: check_certificate_expiry.py
              arguments: --certificate certificate.pem --delta $(CERT_NAME_EXPIRE_SECONDS)

          - script: echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]True"
            condition: failed()
            name: SetVariableOnFailure

          - script: echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]False"
            condition: succeeded()
            name: SetVariableOnSuccess

          - task: Bash@3
            name: CleanupRenewalDecision
            condition: always()
            inputs:
              targetType: "inline"
              script: |
                rm -f certificate.pem

      - job: GetCertificateFromLE
        condition: succeeded()
        dependsOn: RenewalDecision
        variables:
          NEW_CERTIFICATE: $[ dependencies.RenewalDecision.outputs['GetCertificateFromKeyVault.NEW_CERTIFICATE'] ]
        steps:
          - script: pip3 install --require-hashes --requirement requirements.txt
            name: InstallPythonDependencies
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))

          - task: PythonScript@0
            name: GenerateCertificateSigningRequest
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            inputs:
              scriptSource: filePath
              scriptPath: generate_csr.py
              arguments: --common-name $(csr_common_name) --out csr.der --rsa-key-size 2048

          - task: PythonScript@0
            name: PrivateKeyToFile
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            env:
              LE_PRIVATE_KEY_JSON: $(LE_PRIVATE_KEY_JSON)
            inputs:
              scriptSource: filePath
              scriptPath: env_to_file.py
              arguments: --env-name LE_PRIVATE_KEY_JSON --out private_key.json

          - task: PythonScript@0
            name: RegistrationToFile
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            env:
              LE_REGR_JSON: $(LE_REGR_JSON)
            inputs:
              scriptSource: filePath
              scriptPath: env_to_file.py
              arguments: --env-name LE_REGR_JSON --out regr.json

          - task: PythonScript@0
            name: ACMEv2
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            env:
              AZURE_TENANT_ID: $(LE_AZURE_TENANT_ID)
              AZURE_SUBSCRIPTION_ID: $(LE_AZURE_SUBSCRIPTION_ID)
              AZURE_CLIENT_ID: $(LE_AZURE_CLIENT_ID)
              AZURE_CLIENT_SECRET: $(LE_AZURE_CLIENT_SECRET)
            inputs:
              scriptSource: filePath
              scriptPath: acme_tiny.py
              arguments: --private-key private_key.json --regr regr.json --csr csr.der --out certificate_chain.pem --directory-url https://acme-staging-v02.api.letsencrypt.org/directory

          - task: AzureCLI@2
            name: SaveCertificateInKeyVault
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            inputs:
              azureSubscription: $(KEY_VAULT_SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                cat csr.key >> certificate_chain.pem
                RESULT=$(az keyvault certificate import --vault-name $(KEY_VAULT_NAME) -n $(KEY_VAULT_CERT_NAME) --disabled false -f certificate_chain.pem)
                if [ $? -eq 0 ]
                then
                  echo "certificate imported"
                  exit 0
                else
                  echo "error certificate not imported"
                  exit 1
                fi

          - task: Bash@3
            name: CleanupEverything
            condition: always()
            inputs:
              targetType: "inline"
              script: |
                rm -f private_key.json
                rm -f regr.json
                rm -f csr.der
                rm -f csr.key
                rm -f certificate_chain.pem
