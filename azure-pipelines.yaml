pool:
  vmImage: "ubuntu-20.04"

# parameters override
#parameters:
#  - forceRenewal: false

parameters:
  - name: 'FORCE_RENEW_CERT'
    displayName: 'force certificate to be renewed'
    type: boolean
    default: False
    values:
      - False
      - True

stages:
  - stage: GetCertificate
    jobs:
      - job: GetCertificateFromKV
        # condition: # if force renewal is false
        steps:
          - task: AzureCLI@2
            name: CheckExpire
            inputs:
              azureSubscription: $(KEY_VAULT_SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                if [ "${FORCE_RENEW_CERT}" = True ]
                then
                  echo "force renew certificate"
                  echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]True"
                  exit 0
                fi

                echo "get certificate from keyvault"
                RESULT=$(az keyvault certificate download --vault-name $(KEY_VAULT_NAME) -n $(KEY_VAULT_CERT_NAME) -f certificate.pem)
                if [ $? -eq 0 ]
                then
                  echo "certificate found, test expire date"
                else
                  echo "certificate not found, create new certificate"
                  echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]True"
                fi

                # if [ $? -eq 0 ]
                # then
                #   echo "certificate found, test expire date"
                #   if openssl x509 -checkend $(CERT_NAME_EXPIRE_SECONDS) -noout -in cert.pem
                #   then
                #     echo "expire date is greater then CERT_NAME_EXPIRE_SECONDS"
                #     echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]False"
                #   else
                #     echo "expire date is less then CERT_NAME_EXPIRE_SECONDS, , create new certificate"
                #     echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]True"
                #   fi
                # else
                #   echo "certificate not found, create new certificate"
                #   echo "##vso[task.setvariable variable=NEW_CERTIFICATE;isOutput=true]True"
                # fi
            # associate Service Connection, retrieve only Certificates
            # Python to return if expired on timedelta variable
            # serviceconnection: $(serviceconnection)
      - job: GetCertificateFromLE
        # force renewal true || RetrieveCurrenCertificate is expired
        condition: succeeded()
        dependsOn: GetCertificateFromKV
        variables:
          NEW_CERTIFICATE: $[ dependencies.GetCertificateFromKV.outputs['CheckExpire.NEW_CERTIFICATE'] ]
        steps:
          - script: pip3 install -r requirements.txt
            name: requirements
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
          # - task: PythonScript@0
          #   name: requirements
          #   condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
          #   inputs:
          #     scriptSource: inline
          #     script: |
          #       pip3 install -r requirements.txt
          - task: PythonScript@0
            name: generate_csr
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            inputs:
              script: python3 generate_csr.py --common-name $(csr_common_name) --out csr.der --rsa-key-size 2048
          - task: Bash@3
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            inputs:
              targetType: "inline"
              script: |
                printf "%s\n" $LE_PRIVATE_KEY_JSON > private_key.json
                printf "%s\n" $LE_REGR_JSON > regr.json
          - task: PythonScript@0
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            inputs:
              script: python3 acme_tiny.py --private-key private_key.json --regr regr.json --csr csr.der --out certificate_chain.pem
          - task: Bash@3
            condition: and(succeeded(), eq(variables.NEW_CERTIFICATE, true))
            inputs:
              targetType: "inline"
              # condition: #clean always
              script: |
                rm -f private_key.json
                rm -f regr.json
                cat certificate_chain.pem
